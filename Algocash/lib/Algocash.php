<?php
/**
 * Algocash
 * PHP version 5
 *
 * @category Class
 * @package  Algocash
 * @author   devstar
 * @link     https://github.com/Jax-Vinod/algocash-php-sdk
 */

/**
 * Algocash API
 *
 * This is a Algocash API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loganph.work@gmail.com
 * Generated by: https://github.com/Jax-Vinod/algocash-php-sdk.git
 
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/Jax-Vinod/algocash-php-sdk
 * Do not edit the class manually.
 */

namespace Algocash;

/**
 * Algocash Class Doc Comment
 * PHP version 5
 *
 * @category Class
 * @package  Algocash
 * @author   devstar
 * @link     https://github.com/Jax-Vinod/algocash-php-sdk
 */
class Algocash
{
    private static $algocashInstance;

    /**
     * Access token for OAuth
     *
     * @var string
     */
    protected $accessToken = '';

    /**
     * Merchant key for HTTP basic authentication
     *
     * @var string
     */
    protected $apiKey = '';

    /**
     * Merchant secret for HTTP basic authentication
     *
     * @var string
     */
    protected $secret = '';

    /**
     * The host
     *
     * @var string
     */
    protected $host = 'https://apiv2.algorithmic.cash';

    /**
     * User agent of the HTTP request, set to "PHP-Swagger" by default
     *
     * @var string
     */
    protected $userAgent = 'Algocash API';

    /**
     * Debug switch (default set to false)
     *
     * @var bool
     */
    protected $debug = false;

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Sets API key
     *
     * @param string $apiKey              API key
     * @param string $secret              Secret key
     *
     * @return $this
     */
    public function setApiKey($apiKey, $secret)
    {
        $this->apiKey = $apiKey;
        $this->secret = $secret;
        return $this;
    }

    /**
     * Sets the access token for Signature
     *
     * @param string $accessToken Token for Signature
     *
     * @return $this
     */
    public function setAccessToken($accessToken)
    {
        $this->accessToken = $accessToken;
        return $this;
    }

    public function enableProdMode($enable)
    {
        $this->host = $enable ? 'https://apiv2.algorithmic.cash' : 'https://testapi2.algorithmic.cash';
        return $this;
    }

    /**
     * Gets the access token for Signature
     *
     * @return string Access token for Signature
     */
    public function getAccessToken()
    {
        return $this->accessToken;
    }

    /**
     * Gets the username for HTTP basic authentication
     *
     * @return string Username for HTTP basic authentication
     */
    public function getApiKey()
    {
        return $this->apiKey;
    }

    /**
     * Gets the password for HTTP basic authentication
     *
     * @return string Password for HTTP basic authentication
     */
    public function getSecret()
    {
        return $this->secret;
    }

    /**
     * Sets the host
     *
     * @param string $host Host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->host = $host;
    }

    /**
     * Gets the host
     *
     * @return string Host
     */
    public function getHost()
    {
        return $this->host;
    }

    /**
     * Sets the user agent of the api client
     *
     * @param string $userAgent the user agent of the api client
     *
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setUserAgent($userAgent)
    {
        if (!is_string($userAgent)) {
            throw new \InvalidArgumentException('User-agent must be a string.');
        }

        $this->userAgent = $userAgent;
        return $this;
    }

    /**
     * Gets the user agent of the api client
     *
     * @return string user agent
     */
    public function getUserAgent()
    {
        return $this->userAgent;
    }

    /**
     * Sets debug flag
     *
     * @param bool $debug Debug flag
     *
     * @return $this
     */
    public function setDebug($debug)
    {
        $this->debug = $debug;
        return $this;
    }

    /**
     * Gets the debug flag
     *
     * @return bool
     */
    public function getDebug()
    {
        return $this->debug;
    }

    /**
     * Gets the default algoca instance
     *
     * @return Algocash
     */
    public static function getInstance()
    {
        if (self::$algocashInstance === null) {
            self::$algocashInstance = new Algocash();
        }

        return self::$algocashInstance;
    }

     /**
     * request()
     *
     * @return \Algocash\Response
     */
    public function request($path, $params = [], $type = 'GET')
    {
        return (new Request($this))->send($path, $params, $type);
    }
    
}
